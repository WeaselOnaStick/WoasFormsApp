@page "/Admin/Dashboard"
@rendermode InteractiveServer
@inject IDatabaseAccessorService dba
@inject UserManager<WoasFormsAppUser> userManager
@inject IDialogService DialogService
@inject NavigationManager nav
@inject ISnackbar snack


@attribute [Authorize(Roles = "Admin")]

<PageTitle>@loc["ADMIN_PANEL"]</PageTitle>

<MudPaper Class="d-flex flex-column pa-4 mx-auto align-center gap-4 justify-center text-center" Style="max-width: fit-content">

    <MudText Typo="Typo.h2" Align="Align.Center">@loc["ADMIN_PANEL"]</MudText>

    <MudGrid>
        @foreach (var adminAction in adminActions)
        {
            <MudButton OnClick=@(async () => await ExecuteAdminActionWithDialog(adminAction)) >
                @adminAction.ButtonText
            </MudButton>
        }
    </MudGrid>

    <MudDataGrid T="UserRoleModel" Items="_users" @bind-SelectedItems=_selected MultiSelection="true">
        <Columns>
            <SelectColumn />
            <PropertyColumn Title=@loc["USERNAME"] Property="x => x.user.UserName" />
            <PropertyColumn Title=@loc["USER_EMAIL"] Property="x => x.user.Email" />
            <PropertyColumn Title=@loc["USER_OWNED_TEMPLATES_COUNT"] Property="x => x.user.OwnedTemplates.Count" />
            <PropertyColumn Title=@loc["USER_BLOCKED_STATUS"] Property="x => x.user.IsBlocked" />
            <PropertyColumn Title=@loc["USER_ACCOUNT_CREATED_AT"] Property="x => x.user.RegisteredAt" />
            <TemplateColumn Title=@loc["USER_ROLES"]>
                <CellTemplate>
                    <MudChipSet ReadOnly="true" AllClosable="false">
                        @foreach (var item in context.Item.roles)
                        {
                            <MudChip Color="Color.Error">@item</MudChip>
                        }
                    </MudChipSet>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager/>
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    public class AdminActionInfo
    {
        public required Func<UserRoleModel, Task> Action { get; init; }
        public required string ButtonText { get; init; }
        public string? Icon { get; init; }
        public required string DialogTitleText { get; init; }
        public required string DialogContentTextFormatted { get; init; }
        public required string SuccessTextFormatted { get; init; }
    }
    private List<AdminActionInfo> adminActions = new();

    private HashSet<UserRoleModel> _selected = new();

    private List<UserRoleModel> _users;

    protected override async Task OnInitializedAsync()
    {
        adminActions = new(){
            new AdminActionInfo // GIVE ADMIN
                {
                    Action = async view => await dba.GiveUserRole(view.user.Id, "admin"),
                    ButtonText = loc["ADMIN_ACTION_PROMOTE_ADMIN"],
                    Icon = Icons.Material.Filled.AddModerator,
                    DialogTitleText = loc["ADMIN_ACTION_PROMOTE_ADMIN_DIALOG_HEADER"],
                    DialogContentTextFormatted = loc["ADMIN_ACTION_PROMOTE_ADMIN_DIALOG_TEXT_F", _selected.Count],
                    SuccessTextFormatted = loc["ADMIN_ACTION_PROMOTE_ADMIN_SUCCESS_F", _selected.Count],
                },
            new AdminActionInfo // REVOKE ADMIN
                {
                    Action = async view => await dba.RevokeUserRole(view.user.Id, "admin"),
                    ButtonText = loc["ADMIN_ACTION_DEMOTE_ADMIN"],
                    Icon = Icons.Material.Filled.RemoveModerator,
                    DialogTitleText = loc["ADMIN_ACTION_DEMOTE_ADMIN_DIALOG_HEADER"],
                    DialogContentTextFormatted = loc["ADMIN_ACTION_DEMOTE_ADMIN_DIALOG_TEXT_F", _selected.Count],
                    SuccessTextFormatted = loc["ADMIN_ACTION_DEMOTE_ADMIN_SUCCESS_F", _selected.Count],
                },
            new AdminActionInfo // BLOCK
                {
                    Action = async view => await dba.BlockUser(view.user.Id),
                    ButtonText = loc["ADMIN_ACTION_BLOCK_USERS"],
                    Icon = Icons.Material.Filled.LockPerson,
                    DialogTitleText = loc["ADMIN_ACTION_BLOCK_USERS_DIALOG_HEADER"],
                    DialogContentTextFormatted = loc["ADMIN_ACTION_BLOCK_USERS_DIALOG_TEXT_F", _selected.Count],
                    SuccessTextFormatted = loc["ADMIN_ACTION_BLOCK_USERS_SUCCESS_F", _selected.Count],
                },
            new AdminActionInfo // UNBLOCK
                {
                    Action = async view => await dba.UnblockUser(view.user.Id),
                    ButtonText = loc["ADMIN_ACTION_UNBLOCK_USERS"],
                    Icon = Icons.Material.Filled.LockOpen,
                    DialogTitleText = loc["ADMIN_ACTION_UNBLOCK_USERS_DIALOG_HEADER"],
                    DialogContentTextFormatted = loc["ADMIN_ACTION_UNBLOCK_USERS_DIALOG_TEXT_F", _selected.Count],
                    SuccessTextFormatted = loc["ADMIN_ACTION_UNBLOCK_USERS_SUCCESS_F", _selected.Count],
                },
            new AdminActionInfo // DELETE
                {
                    Action = async view => await dba.DeleteUser(view.user.Id),
                    ButtonText = loc["ADMIN_ACTION_DELETE_USERS"],
                    Icon = Icons.Material.Filled.PersonOff,
                    DialogTitleText = loc["ADMIN_ACTION_DELETE_USERS_DIALOG_HEADER"],
                    DialogContentTextFormatted = loc["ADMIN_ACTION_DELETE_USERS_DIALOG_TEXT_F", _selected.Count],
                    SuccessTextFormatted = loc["ADMIN_ACTION_DELETE_USERS_SUCCESS_F", _selected.Count],
                },
            };

        var formUsers = await dba.GetAllUsers();
        if (formUsers?.Any() != true) return; //Paradox
        _users = formUsers.Select(u => new UserRoleModel
        {
            user = u,
            roles = userManager.GetRolesAsync(u).Result.ToList(),
        }).ToList();
    }

    public class UserRoleModel
    {
        public WoasFormsAppUser user { get; set; }
        required public List<string> roles { get; set; }
    }

    private async Task ExecuteAdminActionWithDialog(AdminActionInfo actionInfo)
    {
        if (_selected?.Count == 0) return;
        var options = new DialogParameters<WarningDialog>
        {
            {x => x.DialogTitle, actionInfo.DialogTitleText },
            {x => x.DialogText, actionInfo.DialogContentTextFormatted},
            {x => x.DialogIcon, actionInfo.Icon}
        };
        var dialog = await DialogService.ShowAsync<WarningDialog>(actionInfo.DialogTitleText, options);
        var res = await dialog.Result;
        if (!res.Canceled)
        {
            foreach (var user in _selected) 
                await actionInfo.Action(user);
            snack.Add(actionInfo.SuccessTextFormatted, Severity.Success);
        }
        StateHasChanged();
    }   
}
