@inject Blazored.LocalStorage.ILocalStorageService storage
@inject IUserPrefService<bool> ThemeCacheService
@inject NavigationManager nav


<MudThemeProvider @bind-IsDarkMode="_isDarkMode" @rendermode="InteractiveServer" />


<MudToggleIconButton Style="width: fit-content; align-self: center" hidden="@isButtonHidden" @onclick="OnModeToggleClick" @bind-Toggled="_isDarkMode" ToggledIcon="@Icons.Material.Filled.DarkMode" Icon="@Icons.Material.Outlined.LightMode">Toggle</MudToggleIconButton>



@code {
    private bool _isDarkMode { get; set; }
    private bool _siteBlacklisted;

    private bool isButtonHidden { get; set; }

    private void BlacklistEnforce()
    {
        bool isBlacklisted = nav.ToBaseRelativePath(nav.Uri).StartsWith("Account/", StringComparison.OrdinalIgnoreCase);
        isButtonHidden = isBlacklisted;
        _siteBlacklisted = isBlacklisted;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        BlacklistEnforce();
        if (_siteBlacklisted) return;
        if (ThemeCacheService.Initialized)
        {
            _isDarkMode = ThemeCacheService.CachedVar;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (_siteBlacklisted) return;
        await ThemeCacheService.InitializeAsync();
        var refreshedValue = await ThemeCacheService.RefreshValueAsync();
        if (_isDarkMode != refreshedValue)
        {
            _isDarkMode = refreshedValue;
            StateHasChanged();
        }
    }

    private async Task OnModeToggleClick(MouseEventArgs e)
    {
        _isDarkMode ^= true;
        await ThemeCacheService.SetCachedValueAsync(_isDarkMode);
        StateHasChanged();
    }
}