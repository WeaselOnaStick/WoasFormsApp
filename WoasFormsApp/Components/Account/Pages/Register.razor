@page "/Account/Register"
@layout AccountFormsLayout

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WoasFormsApp.Components.Layout
@using WoasFormsApp.Data

@inject NavigationManager nav
@inject AuthenticationStateProvider asp
@inject UserManager<WoasFormsAppUser> userManager
@inject ISnackbar snack


<PageTitle>Register</PageTitle>

<MudGrid Class="m-6" Justify="Justify.Center">
    <MudItem md="12">
        <MudText Align="Align.Center" Typo="Typo.h3">Create an Account</MudText>

        <MudLink Style="justify-self: center; display: block" Href="/Account/Login" data-enhance-nav="false">
            Already have an account? Log in
        </MudLink>
    </MudItem>
    
    <MudItem md="6">
        <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Username)" @bind-Value="Input.Username"
                    Label="Username" Variant="Variant.Outlined"
                    UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                    Label="Email" Placeholder="name@example.com" Variant="Variant.Outlined"
                    UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                    Label="Password" InputType="InputType.Password" Placeholder="password" Variant="Variant.Outlined"
                    UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword"
                    Label="Confirm Password" InputType="InputType.Password" Placeholder="confirm password" Variant="Variant.Outlined"
                    UserAttributes="@(new() { { "autocomplete", "new-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Register</MudStaticButton>
                </MudItem>
            </MudGrid>

        </EditForm>
        @foreach (var error in errors)
        {
            <MudText Color="@Color.Error">@error</MudText>
        }
    </MudItem>
</MudGrid>

@code {
    string debugText;

    [SupplyParameterFromForm]
    RegisterViewModel Input { get; set; } = new();

    bool valid;
    string[] errors = { };

    private async Task RegisterUser()
    {
        WoasFormsAppUser newUser = new WoasFormsAppUser {
                UserName = Input.Username,
                Email = Input.Email,
                IsBlocked = false,
                RegisteredAt = DateTime.UtcNow,
            };
        var res = await userManager.CreateAsync(newUser, Input.Password);
        if (res.Succeeded)
        {
            snack.Add("Account created!", Severity.Success);
            nav.NavigateTo("/Account/Login", forceLoad: true);
        }
        else
        {
            snack.Add("There was an error creating the account!", Severity.Error);
            errors = res.Errors.Select(e => e.Description).ToArray();
        }

    }

    private class RegisterViewModel
    {
        [Required]
        [Display(Name = "Username")]
        public string Username { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 3)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}