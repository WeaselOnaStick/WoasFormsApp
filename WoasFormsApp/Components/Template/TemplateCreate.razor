@page "/Template/Create"
@using FluentValidation
@using MudBlazor.Utilities

@rendermode InteractiveServer
@inject IDatabaseAccessorService dba
@inject AuthenticationStateProvider asp
@inject NavigationManager nav
@inject ISnackbar snack

<PageTitle>Creating a Template</PageTitle>

<MudGrid Justify="Justify.SpaceAround" Class="pa-4">
    <MudItem md="8" xs="12">
        <MudPaper Class="pa-2">
            <MudForm Model="templateModel" @ref=form Validation="@(validator.ValidateValue)" @bind-Errors=formErrors>

                <MudTextField @bind-Value="templateModel.Title" 
                Class="p-2" Typo="Typo.h3" Variant="Variant.Outlined" 
                Label="Template Title"
                For="@(() => templateModel.Title)"/>

                <MudPaper Elevation="3" Class="m-2 p-2 mb-6">
                    <MudTabs Rounded="true">
                        <MudTabPanel Text="Edit Description">
                            <MudTextField @bind-Value="templateModel.Description"
                            For="@(() => templateModel.Description)"
                            Lines="6" AutoGrow="true" MaxLines="24" 
                            Class="p-2 mb-4" Typo="Typo.subtitle1" Variant="Variant.Outlined" 
                            Label="Template Description"/>
                        </MudTabPanel>
                        <MudTabPanel Text="Preview Markdown">
                            <MudPaper Class="p-2 mb-4" Elevation="0">
                                <MudMarkdown Value="@templateModel.Description"/>
                            </MudPaper>
                        </MudTabPanel>
                    </MudTabs>
                </MudPaper>

                <MudDropContainer 
                Items="templateModel.Fields"
                T="TemplateField"
                ItemDropped="@DropHandle"
                ItemsSelector="@((_,_) => true)">
                    <ChildContent>
                        <MudDropZone T="TemplateField" AllowReorder="true" Identifier="Editor" Class="mud-black">
                            <MudText Typo="Typo.h5" Align="Align.Center">Template Fields</MudText>
                        </MudDropZone>
                    </ChildContent>
                    <ItemRenderer>
                        <TemplateFieldEdit Model="templateModel" Field="context" OnDelete="() => RemoveField(context.Position)"/>
                    </ItemRenderer>
                </MudDropContainer>
            </MudForm>
        </MudPaper>
    </MudItem>

    <MudItem md="4" xs="12">
        <MudPaper Class="pa-4" Style="position: sticky; top: 5rem;">

            <!-- META-TOPIC -->
            <MudSelect @bind-Value="templateModel.TopicId" T="int" Variant="Variant.Outlined" Label="Topic" Required="true" RequiredError="Topic is required!">
                @foreach (var item in _topicsCache)
                {
                    <MudSelectItem Value="item.Id">@item.Title</MudSelectItem>
                }
            </MudSelect>

            <!-- META-TAGS -->
            <MudAutocomplete 
            @bind-Value=_userNewTag @bind-Text=_userNewTag
            Label="Add Tag (optional)" Class="p-2 m-2"
            CoerceValue="true" 
            OnKeyDown="@(e => {if (e.Code == "Enter") AddUserTag();})" 
            AdornmentIcon="@Icons.Material.Filled.AddCircleOutline" AdornmentColor="Color.Success" OnAdornmentClick=AddUserTag />
            <MudChipSet T="string" AllClosable>
                @foreach (var tag in userTags)
                {
                    <MudChip T="TemplateTag" Text="@tag" OnClose="(() => userTags.Remove(tag))" />
                }
            </MudChipSet>

            <MudFileUpload T="IBrowserFile" />

            <MudExpansionPanels>
                <!-- AMMO -->
                <MudExpansionPanel Text="Fields">
                    <MudButtonGroup Vertical="true" Variant="Variant.Outlined" Style="display: flex;">
                        @foreach (var item in _fieldTypesCache)
                        {
                            <MudButton 
                            Disabled="@(_fieldCounts[item.Id].CurAmount >= _fieldCounts[item.Id].MaxAmount)" 
                            StartIcon="@Icons.Material.Outlined.AddCircleOutline"
                            OnClick="(e) => AddField(item.Id)">
                                @($"Add {item.Name}")

                                <MudSpacer />

                                @($"({_fieldCounts[item.Id].CurAmount}/{_fieldCounts[item.Id].MaxAmount})")
                            </MudButton>
                        }
                    </MudButtonGroup>
                </MudExpansionPanel>

                <!-- PRIVACY -->
                <MudExpansionPanel Text="Privacy">
                    <MudCheckBox T="bool" Label="Public" @bind-Value="templateModel.Public"/>
                    @if (!templateModel.Public)
                    {
                        <MudAutocomplete
                        @bind-Value="_autoFoundAllowedUser"
                        SearchFunc="@SearchUser"
                        Label="Search for a user to whitelist" ShowProgressIndicator="true" Class="p-1" Variant="Variant.Filled"
                        AdornmentColor="Color.Success" AdornmentIcon="@Icons.Material.Filled.AddCircleOutline" OnAdornmentClick="() => AddAutoFoundUser()"
                        OnKeyDown="@(e => {if (e.Code == "Enter") AddAutoFoundUser();})"/>
                        <MudDataGrid Items="@templateModel.AllowedUsers" Groupable="false" Dense="true">
                            <Columns>
                                <PropertyColumn Property="u => u.UserName"/>
                                <TemplateColumn>
                                    <CellTemplate>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => {templateModel.AllowedUsers.Remove(context.Item); StateHasChanged(); }" />
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    }
                </MudExpansionPanel>

                <!-- CREATE -->
                <MudToolBar>
                    <MudSpacer />
                    <MudButton OnClick="CreateTemplate" Variant="Variant.Filled" Color="Color.Primary" Class="my-4 justify-center">Create Template!</MudButton>
                    <MudSpacer />
                </MudToolBar>
                <MudStack>
                    @foreach (var err in formErrors)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Error" Align="Align.Center">@err</MudText>
                    }
                </MudStack>
            </MudExpansionPanels>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    Template templateModel = new Template { Fields = new List<TemplateField>() };
    MudForm form;
    public string[] formErrors { get; set; } = new string[0];

    public static int MaxQuestionPerType = 4;

    private List<TemplateFieldType> _fieldTypesCache;
    private List<TemplateTopic> _topicsCache;
    private List<string> _tagsCache;

    private class FieldCounts
    {
        public int MaxAmount;
        public int CurAmount;
    }
    private Dictionary<int, FieldCounts> _fieldCounts = new();

    private HashSet<WoasFormsAppUser> _usersCache;
    private WoasFormsAppUser _autoFoundAllowedUser;

    private string _userNewTag = "";
    private HashSet<string> userTags = new HashSet<string>();

    private async Task InitTagsCache() => _tagsCache ??= (await dba.GetTags()).Select(t => t.Title).ToList();

    private async Task<List<string>> SearchTag(string searchText, CancellationToken cancellationToken)
    {
        await InitTagsCache();
        var res = _tagsCache;
        if (string.IsNullOrEmpty(searchText)) return res;
        return res.Where(t => t.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
    }

    private void AddUserTag()
    {
        if (string.IsNullOrEmpty(_userNewTag)) return;
        userTags.Add(_userNewTag);
        _userNewTag = "";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _topicsCache = await dba.GetTopics();
        _fieldTypesCache = await dba.GetTemplateFieldTypes();
        foreach (var item in _fieldTypesCache)
        {
            _fieldCounts[item.Id] = new FieldCounts
                {
                    MaxAmount = MaxQuestionPerType,
                    CurAmount = 0,
                };
        }
    }


    public async Task AddField(int typeId)
    {
        if (!_fieldCounts.ContainsKey(typeId) || _fieldCounts[typeId].CurAmount >= _fieldCounts[typeId].MaxAmount) return;

        templateModel.Fields.Add(
            new TemplateField{
                Hidden = false,
                Type = _fieldTypesCache.First(tfc => tfc.Id == typeId),
                Template = templateModel,
                Position = templateModel.Fields.Count + 1,
            }
        );

        _fieldCounts[typeId].CurAmount++;
        StateHasChanged();
    }

    public void RemoveField(int Pos)
    {
        var targetField = templateModel.Fields.First(f => f.Position == Pos);
        _fieldCounts[targetField.Type.Id].CurAmount--;
        templateModel.Fields.Remove(targetField);
        StateHasChanged();
    }

    private void DropHandle(MudItemDropInfo<TemplateField> droppedField)
    {
        templateModel.Fields.UpdateOrder(droppedField, f => f.Position);
        StateHasChanged();
    }

    public TemplateCreationValidator validator = new TemplateCreationValidator();

    public class TemplateCreationValidator : AbstractValidator<Template>
    {
        public TemplateCreationValidator(){
            RuleFor(t => t.Title).NotEmpty().WithMessage("Title is required!");
            RuleFor(t => t.Fields).NotEmpty().WithMessage("Add at least 1 template field")
            .Must(
                t => t.Count == 0 || t.GroupBy(f => f.Type.Id)
                .Select(g => new { g.Key, Count = g.Count() })
                .Max(g => g.Count) <= MaxQuestionPerType)
                .WithMessage($"You can't have more than {MaxQuestionPerType} field per type")
            .ForEach((rule) =>
            {
                rule.NotEmpty().WithMessage($"Field titles can't be empty");
            });

            
            RuleFor(t => t.TopicId).NotNull().WithMessage("Topic can't be empty");
            

        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Template>.CreateWithOptions((Template)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    async Task CreateTemplate()
    {
        // await form.Validate();
        // if (!form.IsValid)
        // {
        //     snack.Add("Form invalid", MudBlazor.Severity.Error);
        //     return;
        // }

        var wholeCheck = validator.Validate(templateModel);
        if (!wholeCheck.IsValid)
        {
            formErrors = wholeCheck.Errors.Select(e => e.ErrorMessage).ToArray();
            snack.Add("Form invalid", MudBlazor.Severity.Error);
            return;
        }


        templateModel.Fields.OrderBy(f => f.Position);
        var newTemplate = await dba.CreateTemplate(templateModel);

        if (newTemplate == null)
            snack.Add("There was an error creating the template", MudBlazor.Severity.Error);
        else
        {
            snack.Add($"Template \"{newTemplate.Title}\" created successfully!", MudBlazor.Severity.Success);
            nav.NavigateTo("/");
        }
    }

    async Task CacheUsers() => _usersCache ??= new HashSet<WoasFormsAppUser>(await dba.GetAllUsers());

    async Task<IEnumerable<WoasFormsAppUser>> SearchUser(string searchText, CancellationToken cancellationToken)
    {
        await CacheUsers();
        if (string.IsNullOrWhiteSpace(searchText)) return _usersCache;
        return _usersCache.Where(u => u.UserName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase));
    }

    void AddAutoFoundUser()
    {
        if (_autoFoundAllowedUser == null || string.IsNullOrEmpty(_autoFoundAllowedUser.UserName)) return;
        templateModel.AllowedUsers.Add(_autoFoundAllowedUser);
        _autoFoundAllowedUser = null;
        StateHasChanged();
    }
}
