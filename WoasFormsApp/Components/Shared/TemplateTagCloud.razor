@using System.Text.Json
@using KnowledgePicker.WordCloud
@using KnowledgePicker.WordCloud.Coloring
@using KnowledgePicker.WordCloud.Drawing
@using KnowledgePicker.WordCloud.Layouts
@using KnowledgePicker.WordCloud.Primitives
@using KnowledgePicker.WordCloud.Sizers
@using SkiaSharp
@inject IDatabaseAccessorService dba
@inject IConfiguration config

<MudGrid Justify="Justify.Center" Class="py-8">
    <MudItem xs="8" Style="min-width: fit-content">
        <MudCard>
            <MudCardHeader Class="align-self-center">
                <CardHeaderContent>
                    <MudIcon Icon="@Icons.Material.Filled.Cloud" />
                    <MudText Inline="true" Style="vertical-align: middle">
                        Tag Cloud
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="align-self-center">
                <svg width="@WIDTH" height="@HEIGHT" preserveAspectRatio="xMinYMin slice">
                    <defs>
                        <filter id="textOutline" x="-50%" y="-50%" width="200%" height="200%">
                            <feMorphology in="SourceAlpha" operator="dilate" radius="3" result="dilated" />
                            <feGaussianBlur in="dilated" stdDeviation="4" result="blurred" />
                            <feFlood flood-color="#00000066" result="flood" />
                            <feComposite in="flood" in2="blurred" operator="in" result="outline" />
                            <feMerge>
                                <feMergeNode in="outline" />
                                <feMergeNode in="SourceGraphic" />
                            </feMerge>
                        </filter>
                    </defs>
                    @foreach (var (item, fontSize) in items)
                    {
                        var x = MathF.Round((float)(item.Location.X - item.Measured.Left),2);
                        var y = MathF.Round((float)(item.Location.Y - item.Measured.Top), 2);
                        var fs = MathF.Round((float)fontSize,0);
                        var color = wcg.GetColorHexString(item);
                        <text>
                            <a href=@($"/SearchTemplate?tag={item.Entry.Word}")>
                                <text font-family="Roboto, Helvetica, Arial, sans-serif" transform="translate(@x, @y)" font-size="@fs" fill="#FFFFFF" filter="url(#textOutline)">@item.Entry.Word</text>
                            </a>
                        </text>
                    }
                </svg>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>


@code {
    int WIDTH = 600;
    int HEIGHT = 400;
    int MINFONTSIZE = 12;
    int MAXFONTSIZE = 42;

    Dictionary<TemplateTag, int> _counts = new();
    WordCloudInput wordCloud;
    WordCloudGenerator<SKBitmap> wcg;
    IEnumerable<(LayoutItem Item, double FontSize)> items;

    bool wordCloudReady = false;

    protected override async Task OnInitializedAsync()
    {
        WIDTH = config.GetSection("WoasForms").GetValue<int?>("TagCloudWidth") ?? WIDTH;
        HEIGHT = config.GetSection("WoasForms").GetValue<int?>("TagCloudHeight") ?? HEIGHT;
        MINFONTSIZE = config.GetSection("WoasForms").GetValue<int?>("TagCloudMinFontSize") ?? MINFONTSIZE;
        MAXFONTSIZE = config.GetSection("WoasForms").GetValue<int?>("TagCloudMaxFontSize") ?? MAXFONTSIZE;

        var _counts = await dba.GetTemplateCountsByTag();
        IEnumerable<WordCloudEntry> wordEntries = _counts.Select(p => new WordCloudEntry(p.Key.Title, p.Value));
        var wordCloud = new WordCloudInput(wordEntries)
            {
                Width = WIDTH,
                Height = HEIGHT,
                MinFontSize = MINFONTSIZE,
                MaxFontSize = MAXFONTSIZE,
                ItemMargin = 4,
            };
        var sizer = new LogSizer(wordCloud);
        var engine = new SkGraphicEngine(sizer, wordCloud);
        var layout = new SpiralLayout(wordCloud);
        var colorizer = new RandomColorizer(); // optional
        wcg = new WordCloudGenerator<SKBitmap>(wordCloud, engine, layout);
        items = wcg.Arrange();
        wordCloudReady = true;
    }
}
