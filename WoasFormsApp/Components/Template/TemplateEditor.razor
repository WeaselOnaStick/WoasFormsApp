@using FluentValidation
@using MudBlazor.Utilities

@rendermode InteractiveServer
@inject IDatabaseAccessorService dba
@inject NavigationManager nav
@inject ISnackbar snack
@inject IDialogService DialogService

<PageTitle>Creating a Template</PageTitle>

<MudGrid Justify="Justify.SpaceAround" Class="pa-4">
    <MudItem md="8" xs="12">
        <MudPaper Class="pa-2">
            <MudForm Model="templateModel" Validation="@(validator.ValidateValue)" @bind-Errors=formErrors>

                <MudTextField @bind-Value="templateModel.Title"
                Class="p-2" Typo="Typo.h3" Variant="Variant.Outlined"
                Label="Template Title"
                For="@(() => templateModel.Title)" />

                <MudPaper Elevation="3" Class="m-2 p-2 mb-6">
                    <MudTabs Rounded="true">
                        <MudTabPanel Text="Edit Description">
                            <MudTextField @bind-Value="templateModel.Description"
                            For="@(() => templateModel.Description)"
                            Lines="6" AutoGrow="true" MaxLines="24"
                            Class="p-2 mb-4" Typo="Typo.subtitle1" Variant="Variant.Outlined"
                            Label="Template Description" />
                        </MudTabPanel>
                        <MudTabPanel Text="Preview Markdown">
                            <MudPaper Class="p-2 mb-4" Elevation="0">
                                <MudMarkdown Value="@templateModel.Description" />
                            </MudPaper>
                        </MudTabPanel>
                    </MudTabs>
                </MudPaper>

                <MudDropContainer Items="templateModel.Fields"
                T="TemplateField"
                ItemDropped="@DropHandle"
                ItemsSelector="@((_,_) => true)">
                    <ChildContent>
                        <MudDropZone T="TemplateField" AllowReorder="true" Identifier="Editor" Class="mud-black">
                            <MudText Typo="Typo.h5" Align="Align.Center">Template Fields</MudText>
                        </MudDropZone>
                    </ChildContent>
                    <ItemRenderer>
                        <TemplateFieldEdit Model="templateModel" Field="context" OnDelete="() => RemoveField(context.Position)" />
                    </ItemRenderer>
                </MudDropContainer>
            </MudForm>
        </MudPaper>
    </MudItem>

    <MudItem md="4" xs="12">
        <MudPaper Class="pa-4" Style="position: sticky; top: 5rem;">

            <!-- META-TOPIC -->
            <MudSelect @bind-Value="templateModel.TopicId" T="int" Variant="Variant.Outlined" Label="Topic" Required="true" RequiredError="Topic is required!">
                @foreach (var item in _topicsCache)
                {
                    <MudSelectItem Value="item.Id">@item.Title</MudSelectItem>
                }
            </MudSelect>

            <!-- META-TAGS -->
            <MudAutocomplete @bind-Value=_userNewTag @bind-Text=_userNewTag
            Label="Add Tag (optional)" Class="p-2 m-2"
            CoerceValue="true" SearchFunc="SearchTag" T="string"
            OnKeyDown="@(e => {if (e.Code == "Enter") AddUserTag();})"
            AdornmentIcon="@Icons.Material.Filled.AddCircleOutline" AdornmentColor="Color.Success" OnAdornmentClick=AddUserTag />
            <MudChipSet T="TemplateTag" AllClosable>
                @foreach (var tag in templateModel.Tags)
                {
                    <MudChip T="TemplateTag" Text="@tag.Title" OnClose="(() => templateModel.Tags.Remove(tag))" />
                }
            </MudChipSet>

            <MudFileUpload T="IBrowserFile" />

            <MudExpansionPanels>
                <!-- AMMO -->
                <MudExpansionPanel Text="Fields">
                    <MudButtonGroup Vertical="true" Variant="Variant.Outlined" Style="display: flex;">
                        @foreach (var item in _fieldTypesCache)
                        {
                            <MudButton Disabled="@(_fieldCounts[item.Id].CurAmount >= _fieldCounts[item.Id].MaxAmount)"
                            StartIcon="@Icons.Material.Outlined.AddCircleOutline"
                            OnClick="(e) => AddField(item.Id)">
                                @($"Add {item.Name}")

                                <MudSpacer />

                                @($"({_fieldCounts[item.Id].CurAmount}/{_fieldCounts[item.Id].MaxAmount})")
                            </MudButton>
                        }
                    </MudButtonGroup>
                </MudExpansionPanel>

                <!-- PRIVACY -->
                <MudExpansionPanel Text="Privacy">
                    <MudCheckBox T="bool" Label="Public" @bind-Value="templateModel.Public" />
                    @if (!templateModel.Public)
                    {
                        <MudAutocomplete @bind-Value="_autoFoundAllowedUser"
                        SearchFunc="@SearchUser"
                        Label="Search for a user to whitelist" ShowProgressIndicator="true" Class="p-1" Variant="Variant.Filled"
                        AdornmentColor="Color.Success" AdornmentIcon="@Icons.Material.Filled.AddCircleOutline" OnAdornmentClick="() => AddAutoFoundUser()"
                        OnKeyDown="@(e => {if (e.Code == "Enter") AddAutoFoundUser();})" />
                        <MudDataGrid Items="@templateModel.AllowedUsers" Groupable="false" Dense="true">
                            <Columns>
                                <PropertyColumn Property="u => u.UserName" />
                                <TemplateColumn>
                                    <CellTemplate>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => {templateModel.AllowedUsers.Remove(context.Item); StateHasChanged(); }" />
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    }
                </MudExpansionPanel>

                <!-- CREATE -->
                <MudToolBar Class="justify-content-center">
                    @switch (editorMode)
                    {
                        case EditorMode.Create:
                            <MudButton OnClick="CreateTemplate" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Check" Class="my-4 justify-center">Create Template</MudButton>
                            break;
                        case EditorMode.Edit:
                            <MudButton OnClick="EditTemplate" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Create" Class="my-4 justify-center">Save Template</MudButton>
                            break;
                    }

                </MudToolBar>
                <MudStack>
                    @foreach (var err in formErrors)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Error" Align="Align.Center">@err</MudText>
                    }
                </MudStack>
            </MudExpansionPanels>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public enum EditorMode{
        Create,
        Edit,
    }

    [Parameter, EditorRequired]
    public EditorMode editorMode { get; set; }

    [Parameter, EditorRequired]
    public Template templateModel { get; set; } = new Template() { Fields = new List<TemplateField>() };

    public string[] formErrors { get; set; } = new string[0];

    public static int MaxQuestionPerType = 4;

    private HashSet<TemplateFieldType> _fieldTypesCache = new();
    private HashSet<TemplateTopic> _topicsCache = new();
    private HashSet<TemplateTag> _tagsCache = new();

    private class FieldCounts
    {
        public int MaxAmount;
        public int CurAmount;
    }
    private Dictionary<int, FieldCounts> _fieldCounts = new();

    private HashSet<WoasFormsAppUser> _usersCache = new();
    private WoasFormsAppUser _autoFoundAllowedUser = new();

    private string _userNewTag = "";

    private async Task InitTagsCache() => _tagsCache ??= (await dba.GetTags()).ToHashSet();

    private async Task<IEnumerable<string>> SearchTag(string searchText, CancellationToken cancellationToken)
    {
        await InitTagsCache();
        var res = _tagsCache.ExceptBy(templateModel.Tags.Select(t => t.Title), t => t.Title, StringComparer.InvariantCultureIgnoreCase);
        if (string.IsNullOrEmpty(searchText)) return res.Select(t => t.Title);
        return res.Where(t => t.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).Select(t => t.Title);
    }

    private void AddUserTag()
    {
        if (string.IsNullOrEmpty(_userNewTag)) return;
        if (templateModel.Tags.Select(t => t.Title).Contains(_userNewTag)) return;
        templateModel.Tags.Add(new TemplateTag { Title = _userNewTag });
        _userNewTag = "";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _topicsCache = await dba.GetTopics();
        _fieldTypesCache = await dba.GetTemplateFieldTypes();
        foreach (var fieldType in _fieldTypesCache)
        {
            int curCount = templateModel.Fields.Where(f => f.Type.Name == fieldType.Name).Count();
            _fieldCounts[fieldType.Id] = new FieldCounts
                {
                    MaxAmount = MaxQuestionPerType,
                    CurAmount = curCount,
                };
        }
    }


    public void AddField(int typeId)
    {
        if (!_fieldCounts.ContainsKey(typeId) || _fieldCounts[typeId].CurAmount >= _fieldCounts[typeId].MaxAmount) return;

        templateModel.Fields.Add(
            new TemplateField
                {
                    Id = templateModel.Fields.Count,
                    Hidden = false,
                    Type = _fieldTypesCache.First(tfc => tfc.Id == typeId),
                    Template = templateModel,
                    Position = templateModel.Fields.Count + 1,
                }
        );

        _fieldCounts[typeId].CurAmount++;
        StateHasChanged();
    }

    public void RemoveField(int Pos)
    {
        var targetField = templateModel.Fields.First(f => f.Position == Pos);
        _fieldCounts[targetField.Type.Id].CurAmount--;
        templateModel.Fields.Remove(targetField);
        StateHasChanged();
    }

    private void DropHandle(MudItemDropInfo<TemplateField> droppedField)
    {
        templateModel.Fields.UpdateOrder(droppedField, f => f.Position);
        StateHasChanged();
    }

    public TemplateCreationValidator validator = new TemplateCreationValidator();

    public class TemplateCreationValidator : AbstractValidator<Template>
    {
        public TemplateCreationValidator()
        {
            RuleFor(t => t.Title).NotEmpty().WithMessage("Title is required!");
            RuleFor(t => t.Fields).NotEmpty().WithMessage("Add at least 1 template field!");

            RuleFor(t => t.Fields).Must(
                t => t.Count == 0 || t.GroupBy(f => f.Type.Id)
                .Select(g => new { g.Key, Count = g.Count() })
                .Max(g => g.Count) <= MaxQuestionPerType)
                .WithMessage($"You can't have more than {MaxQuestionPerType} field per type!");

            RuleForEach(t => t.Fields).ChildRules(f =>
                {
                    f.RuleFor(f => f.Title).NotEmpty().WithMessage((f, t) => $"Field #{f.Position} is missing a title!");
                });


            RuleFor(t => t.TopicId).NotNull().WithMessage("Topic can't be empty");


        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Template>.CreateWithOptions((Template)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    async Task<bool> ValidateTemplate()
    {
        var wholeCheck = await validator.ValidateAsync(templateModel);
        if (!wholeCheck.IsValid)
        {
            formErrors = wholeCheck.Errors.Select(e => e.ErrorMessage).ToArray();
            snack.Add("Form invalid", MudBlazor.Severity.Error);
            return false;
        }
        return true;
    }

    void SortTemplate() => templateModel.Fields = templateModel.Fields.OrderBy(f => f.Position).ToList();

    async Task CreateTemplate()
    {
        if (!await ValidateTemplate()) return;
        SortTemplate();

        var newTemplate = await dba.CreateTemplate(templateModel);

        if (newTemplate == null)
            snack.Add("There was an error creating the template", MudBlazor.Severity.Error);
        else
        {
            snack.Add($"Template \"{newTemplate.Title}\" created successfully!", MudBlazor.Severity.Success);
            nav.NavigateTo($"/Template/{newTemplate.Id}");
        }
    }

    async Task EditTemplate()
    {
        if (!await ValidateTemplate()) return;
        if (templateModel.Responses.Count > 0)
        {
            bool? confirm = await DialogService.ShowMessageBox(
                new MessageBoxOptions()
                    {
                        Title = "Confirm Edit",
                        Message = "Current Template already received forms. Changing or deleting fields will keep respective data but could lead to data misinterpretation. Answers to deleted fields won't be visible until new fields of respective types are created.",
                        YesText = "Confirm",
                        CancelText = "Cancel",
                    }
            );
            if (confirm == null) { StateHasChanged(); return; }
        }
        var newTemplate = await dba.UpdateTemplate(templateModel, templateModel.Id);

        if (newTemplate == null)
            snack.Add("There was an error updating the template", MudBlazor.Severity.Error);
        else
        {
            snack.Add($"Template \"{newTemplate.Title}\" updated successfully!", MudBlazor.Severity.Success);
            nav.NavigateTo($"/Template/{newTemplate.Id}");
        }
    }

    async Task CacheUsers() => _usersCache ??= new HashSet<WoasFormsAppUser>(await dba.GetAllUsers());

    async Task<IEnumerable<WoasFormsAppUser>> SearchUser(string searchText, CancellationToken cancellationToken)
    {
        await CacheUsers();
        var res = _usersCache.ExceptBy(templateModel.AllowedUsers.Select(au => au.UserName), u => u.UserName, StringComparer.InvariantCultureIgnoreCase);
        if (string.IsNullOrWhiteSpace(searchText)) return _usersCache;
        return _usersCache.Where(u => u.UserName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase));
    }

    void AddAutoFoundUser()
    {
        if (_autoFoundAllowedUser == null || string.IsNullOrEmpty(_autoFoundAllowedUser.UserName)) return;
        templateModel.AllowedUsers.Add(_autoFoundAllowedUser);
        _autoFoundAllowedUser = null;
        StateHasChanged();
    }
}
