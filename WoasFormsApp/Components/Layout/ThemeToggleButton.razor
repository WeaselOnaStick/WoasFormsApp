@inject Blazored.LocalStorage.ILocalStorageService storage
@inject IThemeCacheService ThemeCacheService
@inject NavigationManager nav


<MudThemeProvider @bind-IsDarkMode="_isDarkMode" @rendermode="InteractiveServer" />


<MudToggleIconButton hidden="@isButtonHidden" @onclick="OnModeToggleClick" @bind-Toggled="_isDarkMode" ToggledIcon="@Icons.Material.Filled.DarkMode" Icon="@Icons.Material.Outlined.LightMode">Toggle</MudToggleIconButton>
<MudStack>
    <div>
        <MudText Typo="Typo.subtitle1">ServiceInit: @ThemeCacheService.Initialized</MudText>
        <MudIcon Icon="@(ThemeCacheService.Initialized ? Icons.Material.Filled.Check : Icons.Material.Filled.Close)" />
    </div>
    <div>
        <MudText Typo="Typo.subtitle1">ServiceMode: @ThemeCacheService.CachedMode</MudText>

        <MudIcon Icon="@(ThemeCacheService.Initialized ? Icons.Material.Outlined.DarkMode : Icons.Material.Outlined.LightMode)" />
    </div>
</MudStack>



@code {
    private bool _isDarkMode { get; set; }
    private bool _siteBlacklisted;

    private bool isButtonHidden { get; set; }

    private void BlacklistEnforce()
    {
        bool isBlacklisted = nav.ToBaseRelativePath(nav.Uri).StartsWith("Account/", StringComparison.OrdinalIgnoreCase);
        isButtonHidden = isBlacklisted;
        _siteBlacklisted = isBlacklisted;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        BlacklistEnforce();
        if (_siteBlacklisted) return;
        if (ThemeCacheService.Initialized)
        {
            _isDarkMode = ThemeCacheService.CachedMode;
            StateHasChanged();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        if (_siteBlacklisted) return;
        if (!ThemeCacheService.Initialized)
        {
            await ThemeCacheService.InitializeAsync();
        }
        if (_isDarkMode != ThemeCacheService.CachedMode)
        {
            _isDarkMode = ThemeCacheService.CachedMode;
            StateHasChanged();
        }
    }

    private async Task OnModeToggleClick(MouseEventArgs e)
    {
        _isDarkMode ^= true;
        await ThemeCacheService.SetCachedValueAsync(_isDarkMode);
        StateHasChanged();
    }
}