@page "/Account/Login"
@layout AccountFormsLayout

@using WoasFormsApp.Components.Layout

@inject SignInManager<WoasFormsAppUser> SignInManager
@inject UserManager<WoasFormsAppUser> UserManager
@inject AuthenticationStateProvider asp
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject ISnackbar SnackBar

<PageTitle>Login</PageTitle>

<MudGrid Class="m-6" Justify="Justify.Center"> 
    <MudItem md="12">
        <MudText Align="Align.Center" Typo="Typo.h2">Log in</MudText>

        <MudLink Style="justify-self: center; display: block" Href="/Account/Register" data-enhance-nav="false">
            Don't have an account? Click to register.
        </MudLink>
    </MudItem>
    
    <MudItem md="6">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />


            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField ShrinkLabel="true" For="@(() => Input.Username)" @bind-Value="Input.Username"
                    Label=@loc["USERNAME"]
                    UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField ShrinkLabel="true" For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label=@loc["PASSWORD"] InputType="InputType.Password"  
                    UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">@loc["REMEMBER_ME"]</MudStaticCheckBox>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">@loc["SIGN_IN"]</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>
    </MudItem>
</MudGrid>



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginViewModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var user = (await asp.GetAuthenticationStateAsync()).User;

        if (user.Identity.IsAuthenticated)
        {
            await SignInManager.SignOutAsync();
            NavigationManager.Refresh(forceReload: true);
        }
    }

    public async Task LoginUser()
    {
        var user = await UserManager.FindByNameAsync(Input.Username);
        if (user != null && user.IsBlocked)
        {
            SnackBar.Add(loc["USER_IS_BLOCKED"], Severity.Error);
            errorMessage = loc["USER_IS_BLOCKED"];
            return;
        }
        var result = await SignInManager.PasswordSignInAsync(Input.Username, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation(loc["USER_LOGGED_IN"]);
            NavigationManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            SnackBar.Add(loc["LOGIN_FAILED"], Severity.Error);
            errorMessage = loc["LOGIN_FAILED"];
        }
    }

    private sealed class LoginViewModel
    {

        public string Username { get; set; } = "";

        public string Password { get; set; } = "";

        public bool RememberMe { get; set; } = true;

    }
}