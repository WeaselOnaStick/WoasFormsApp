@page "/Support"
@using System.ComponentModel.DataAnnotations

@inject IDatabaseAccessorService dba
@inject IJiraTicketsService jira
@inject ISnackbar snack

@rendermode InteractiveServer

<AuthorizeView Context="authContext">
    <Authorized>
        <PaperCenter PageTitle=@loc["SUPPORT_HEADER"]>
            <EditForm Model="_ticket" OnValidSubmit="submitTicket">
                <DataAnnotationsValidator />
                <MudTextField Class="my-4" Variant="Variant.Filled" @bind-Value=_ticket.Email For=@(()=>_ticket.Email) Label=@loc["EMAIL"]/>
                <MudTextField Class="my-4" Lines="8" Variant="Variant.Filled" @bind-Value=_ticket.Summary For=@(()=>_ticket.Summary) Label=@loc["DESCRIPTION"] />
                <MudButton @bind-Disabled=processing Class="my-4" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info">
                    @if (processing)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-2"/>
                    }
                    @loc["SUBMIT"]
                </MudButton>
            </EditForm>
        </PaperCenter>
    </Authorized>
    <NotAuthorized>
        <MudText Typo="Typo.h3" Class="ma-6" Align="Align.Center">
            @loc["LOGIN_TO_CONTINUE"]
        </MudText>
    </NotAuthorized>
</AuthorizeView>

@code {
    public bool formValid;

    public bool processing = false;

    public NewTicketModel _ticket = new();

    protected override async Task OnInitializedAsync()
    {
        _ticket.Email = (await dba.GetCurrentUser())?.Email ?? "";
        StateHasChanged();
    }

    private async Task submitTicket()
    {
        processing = true;
        StateHasChanged();
        var res = await jira.CreateTicketByCurrentUser(_ticket);
        if (res != null)
        {
            var successFragment = new RenderFragment(@<div>
                @loc["SUCCESS"] <MudLink Color="Color.Primary" Typo="Typo.body1" Href="/Profile">@loc["OPEN_PROFILE_TO_SEE_TICKETS"]</MudLink>
                </div>);
            snack.Add(successFragment, Severity.Success);
            _ticket.Summary = "";
        }
        else
            snack.Add(loc["ERROR"], Severity.Error);
        processing = false;
        StateHasChanged();
    }
}
