@using System.Security.Claims
@using WoasFormsApp.Data
@using WoasFormsApp.Services

@inject NavigationManager nav
@inject IDatabaseAccessorService dba
@attribute [StreamRendering]

@inject UserManager<WoasFormsAppUser> userManager
@inject AuthenticationStateProvider auth

@if (templates != null && templates.Count == 0) // 0 Templates loaded
{
    <MudPaper Class="d-flex flex-column pa-4 mx-auto align-center gap-4 justify-center text-center" Style="max-width: fit-content" Elevation="2">
        <MudText Typo="Typo.h4">@loc["NO_TEMPLATES"]</MudText>
        <AuthorizeView>
            <Authorized>
                <MudButton Href="/Template/Create" Color="Color.Primary" Variant="Variant.Filled">@loc["CREATE_TEMPLATE"]</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/Account/Login" Variant="Variant.Filled" Color="Color.Primary">@loc["LOG_IN_TO_CREATE_TEMPLATE"]</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudPaper>
}
else
{
    @if(!string.IsNullOrWhiteSpace(_headerText))
    {
        <MudText Typo="Typo.h2" Class="p-4 m-1" Align="Align.Center">@_headerText</MudText>
    }
    <MudGrid Spacing=6 Justify="Justify.Center">
        @if (templates == null) // Loading templates...
        {
            @for (int i = 0; i < skeletonsCount; i++)
            {
                <MudItem>
                    <MudCard Style="max-width:300px">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" Width="300px" />
                        <MudCardContent>
                            <MudSkeleton Width="30%" Height="42px;" />
                            <MudSkeleton Width="80%" />
                            <MudSkeleton Width="100%" />
                        </MudCardContent>
                        <MudCardActions style="flex-direction: column; align-items: center">
                            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }

        @if (templates != null && templates.Count > 0) // Templates loaded
        {
            @for (int i = 0; i<templates.Count; i++)
            {
                int realIndex = i;
                var templateView = templates[realIndex];

                <MudItem>
                    <MudBadge Elevation="3" Content=@loc[templateView.template.Topic.Title].Value Origin=Origin.TopCenter Color="Color.Secondary" Overlap="true" BadgeClass="template-gallery-topic-badge">
                        <MudCard Elevation="3">
                            <MudCardHeader>
                                <CardHeaderActions> 
                                    <MudContainer Class="p-2">
                                        <AuthorizeView>
                                            <Authorized>
                                                <MudChip T="int" OnClick="async () => await TemplateLike(templateView)"
                                                Variant="@(templateView.liked ? Variant.Filled : Variant.Text)"
                                                Color="@(templateView.liked ? Color.Primary : Color.Surface)"
                                                Icon="@(templateView.liked ? Icons.Material.Filled.Favorite : Icons.Material.Outlined.FavoriteBorder)">@templateView.likes</MudChip>
                                            </Authorized>
                                            <NotAuthorized>
                                                <MudChip T="int"
                                                Variant="Variant.Filled"
                                                Color="Color.Surface"
                                                Icon="@Icons.Material.Filled.Favorite">@templateView.likes</MudChip>
                                            </NotAuthorized>
                                        </AuthorizeView>

                                        <MudChip T="int" Icon="@Icons.Material.Filled.Comment" Color="Color.Surface">@templateView.comments</MudChip>

                                        <MudChip T="int" Icon="@Icons.Material.Filled.Description" Color="Color.Surface">@templateView.responses</MudChip>
                                    </MudContainer>

                                </CardHeaderActions>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">@TemplateTitleOrUnnamed(templateView.template, loc)</MudText>
                                    @if(templateView.template.Owner != null)
                                    {
                                        <MudText Inline="true" Typo="Typo.subtitle1" style="font-style: italic;">
                                            <UsernameClickable UserName="@($"{templateView.template.Owner.UserName}\t")"/>
                                        </MudText>
                                        <MudText Inline="true" Typo="Typo.subtitle1">@(templateView.template.CreatedAt.ToLocalTime().ToShortDateString())</MudText>
                                    }
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardMedia Style="width: 300px; height: 200px; align-self: center;"
                            Image="@(string.IsNullOrWhiteSpace(templateView.template.CoverImageUrl) ? Assets["BlankThumbnail.png"] : templateView.template.CoverImageUrl)" />
                            <MudCardActions Class="justify-space-around my-2">
                                <MudButton 
                                Class="rounded-pill" Variant="Variant.Filled" Color="Color.Info" 
                                Href="@($"/Template/{templateView.template.Id}")">@loc["VIEW_TEMPLATE"]</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudBadge>
                </MudItem>
            }
        }
    </MudGrid>
}

@code {
    public enum GalleryMode{
        GlobalNewest,
        GlobalPopular,
        BySpecificUser,
        CustomList,
    }

    [Parameter, EditorRequired]
    public GalleryMode Mode { get; set; }

    [Parameter]
    public string? TargetUsername { get; set; }

    [Parameter]
    public List<Template>? CustomTemplates { get; set; }

    [Parameter]
    public string CustomTemplatesHeaderText { get; set; } = "";

    [Parameter]
    public int skeletonsCount { get; set; } = 12;

    [Parameter]
    public int? TakeAmount { get; set; }

    [Parameter]
    public string? CustomHeaderText { get; set; }


    List<TemplateView> templates = new();

    private WoasFormsAppUser? curUser;

    string _headerText = "";

    protected override async Task OnParametersSetAsync()
    {
        var fallbackHeaderText = Mode switch
        {
            GalleryMode.GlobalNewest => loc["TEMPLATES_NEWEST"],
            GalleryMode.GlobalPopular => loc["TEMPLATES_POPULAR"],
            GalleryMode.CustomList => CustomTemplatesHeaderText,
            _ => ""

        };
        _headerText = CustomHeaderText ?? fallbackHeaderText;

        var authState = await auth.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        curUser = await userManager.FindByIdAsync(userId);


        IEnumerable<Template> prepList;
        switch (Mode)
        {
            case GalleryMode.GlobalNewest: 
                prepList = await dba.GetAvailableTemplates();
                prepList = prepList.OrderByDescending(t => t.CreatedAt).ToList();
                break;
            case GalleryMode.GlobalPopular:
                prepList = await dba.GetAvailableTemplates();
                prepList = prepList.OrderByDescending(t => t.Responses.Count).ThenByDescending(t => t.CreatedAt).ToList();
                break;
            case GalleryMode.CustomList:
                if (CustomTemplates == null) throw new Exception("CustomTemplates parameter required");
                prepList = CustomTemplates;
                break;
            default:
                prepList = new List<Template>();
                break;
        }
        prepList = prepList.Take(TakeAmount ?? prepList.Count());
        templates = prepList.Select(
            t => new TemplateView()
                {
                    template = t,
                    liked = (curUser == null) ? false : t.UsersWhoLiked.Contains(curUser),
                    likes = t.UsersWhoLiked.Count,
                    comments = t.Comments.Count,
                    responses = t.Responses.Count,
                }
        ).ToList();
        StateHasChanged();
    }

    public class TemplateView(){
        public Template template { get; set; }
        public bool liked { get; set; }
        public int likes { get; set; }
        public int comments {get; set;}
        public int responses { get; set; }
    }

    private async Task TemplateLike(TemplateView target)
    {
        target.liked ^= true;
        target.likes += target.liked ? 1 : -1;
        await dba.LikeTemplate(target.template.Id, target.liked);
        target.liked = (curUser == null) ? false : (await dba.GetTemplate(target.template.Id)).UsersWhoLiked.Contains(await dba.GetCurrentUser()!);
        StateHasChanged();
    }
}