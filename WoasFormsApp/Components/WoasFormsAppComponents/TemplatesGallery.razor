@using WoasFormsApp.Data
@using WoasFormsApp.Services

@inject NavigationManager nav
@inject IDatabaseAccessorService dba
@attribute [StreamRendering]

@if (templates != null && templates.Count == 0) // 0 Templates loaded
{
    <MudPaper Class="d-flex flex-column pa-4 mx-auto align-center gap-4 justify-center text-center" Style="max-width: fit-content" Elevation="2">
        <MudText Typo="Typo.h4">No templates yet...</MudText>
        <MudText Typo="Typo.h5">Be the first one to create!</MudText>
        <AuthorizeView>
            <Authorized>
                <MudButton Href="/Template/Create" Variant="Variant.Filled">Create Template</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/Account/Login" Variant="Variant.Filled" Color="Color.Info">Log in to Create Template</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudPaper>
}
else
{
    <MudGrid Spacing=6 Justify="Justify.Center">
        @if (templates == null) // Loading templates...
        {
            @for (int i = 0; i < skeletonsCount; i++)
            {
                <MudItem>
                    <MudCard Style="max-width:300px">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" Width="300px" />
                        <MudCardContent>
                            <MudSkeleton Width="30%" Height="42px;" />
                            <MudSkeleton Width="80%" />
                            <MudSkeleton Width="100%" />
                        </MudCardContent>
                        <MudCardActions style="flex-direction: column; align-items: center">
                            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }

        @if (templates != null && templates.Count > 0) // Templates loaded
        {
            @for (int i = 0; i<templates.Count; i++)
            {
                var template = templates[i];
                int realIndex = i;

                <MudItem>
                    <MudCard Style="max-width:300px">
                        <MudCardMedia Image="@template.CoverImageUrl" Height="200" Style="width:300px"/>
                        <MudCardContent>
                            <MudText Typo="Typo.h6">@template.Title</MudText>
                            <MudText Typo="Typo.body2">Some Douchebag</MudText>
                        </MudCardContent>
                        <MudCardActions style="flex-direction: column; align-items: center">
                            <AuthorizeView Roles="Admin">
                                <Authorized>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" Href="@($"/Template/Edit/{templates[realIndex].Id}")">Edit</MudButton>
                                </Authorized>
                            </AuthorizeView>
                            <MudButton Variant="Variant.Filled" Color="Color.Info" Href="@($"/Template/Fill/{templates[realIndex].Id}")">Fill out</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
}

@code {
    int skeletonsCount = 12;

    List<Template> templates = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var foundTemplates = await dba.GetAvailableTemplates();
        templates = foundTemplates == null ? new List<Template>() : foundTemplates;
        StateHasChanged();
    }
}
