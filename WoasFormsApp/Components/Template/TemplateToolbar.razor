@inject IDialogService DialogService
@inject IDatabaseAccessorService dba
@inject NavigationManager nav
@inject ISnackbar snack


@if(Enabled)
{
    @if (ShowViewButton)
    {
        <MudFab Class="p-2 m-1" Href=@($"/Template/{Item.Id}") StartIcon="@Icons.Material.Filled.Description" Variant="Variant.Outlined" Color="Color.Info" Label=@loc["TEMPLATE_PAGE"] />
    }
    @if(ShowEditButton)
    {
        <MudFab Class="p-2 m-1" Href=@($"/Template/{Item.Id}/Edit") StartIcon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Secondary" Label=@loc["EDIT_TEMPLATE"]/>
    }
    @if(ShowAnalyticsButton)
    {
        <MudFab Class="p-2 m-1" Href=@($"/Template/{Item.Id}/Analytics") StartIcon="@Icons.Material.Filled.Analytics" Variant="Variant.Outlined" Color="Color.Tertiary" Label=@loc["ANALYTICS"]/>
    }
        <MudFab Class="p-2 m-1" OnClick="DeleteTemplate" StartIcon="@Icons.Material.Filled.DeleteForever" Variant="Variant.Outlined" Color="Color.Error" Label=@loc["DELETE_TEMPLATE"] />

}

@code {
    [Parameter, EditorRequired]
    public required Template Item { get; set; }

    [Parameter]
    public bool ShowViewButton { get; set; } = true;

    [Parameter]
    public bool ShowEditButton { get; set; } = true;

    [Parameter]
    public bool ShowAnalyticsButton { get; set; } = true;

    private bool Enabled = false;

    protected override async Task OnInitializedAsync()
    {
        Enabled = await dba.GetCurrentUserOwnsTemplate(Item.Id);
    }

    private async Task DeleteTemplate()
    {
        var options = new DialogParameters<WarningDialog>
        {
            {x => x.DialogTitle, loc["CONFIRM_DELETE"] },
            {x => x.DialogText, loc["CONFIRM_DELETE_DESC"]},
            {x => x.DialogIcon, Icons.Material.Filled.DeleteForever }
        };
        var dialog = await DialogService.ShowAsync<WarningDialog>(null, options);
        var res = await dialog.Result;
        if (!res.Canceled)
        {
            await dba.DeleteTemplate(Item.Id);
            snack.Add(loc["TEMPLATE_DELETED"], Severity.Success);
            nav.Refresh(true);
        }
    }
}
