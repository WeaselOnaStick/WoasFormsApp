@using System.Security.Claims
@using WoasFormsApp.Data
@using WoasFormsApp.Services

@inject NavigationManager nav
@inject IDatabaseAccessorService dba
@attribute [StreamRendering]

@inject UserManager<WoasFormsAppUser> userManager
@inject AuthenticationStateProvider auth

@if (templates != null && templates.Count == 0) // 0 Templates loaded
{
    <MudPaper Class="d-flex flex-column pa-4 mx-auto align-center gap-4 justify-center text-center" Style="max-width: fit-content" Elevation="2">
        <MudText Typo="Typo.h4">No templates yet...</MudText>
        <AuthorizeView>
            <Authorized>
                <MudButton Href="/Template/Create" Color="Color.Primary" Variant="Variant.Filled">Create Template</MudButton>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/Account/Login" Variant="Variant.Filled" Color="Color.Primary">Log in to Create Template</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudPaper>
}
else
{
    @if(!string.IsNullOrWhiteSpace(_headerText))
    {
        <MudText Typo="Typo.h2" Class="p-4 m-1" Align="Align.Center">@_headerText</MudText>
    }
    <MudGrid Spacing=6 Justify="Justify.Center">
        @if (templates == null) // Loading templates...
        {
            @for (int i = 0; i < skeletonsCount; i++)
            {
                <MudItem>
                    <MudCard Style="max-width:300px">
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="200px" Width="300px" />
                        <MudCardContent>
                            <MudSkeleton Width="30%" Height="42px;" />
                            <MudSkeleton Width="80%" />
                            <MudSkeleton Width="100%" />
                        </MudCardContent>
                        <MudCardActions style="flex-direction: column; align-items: center">
                            <MudSkeleton Width="64px" Height="40px" Class="ml-2" />
                            <MudSkeleton Width="105px" Height="40px" Class="ml-3" />
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }

        @if (templates != null && templates.Count > 0) // Templates loaded
        {
            @for (int i = 0; i<templates.Count; i++)
            {
                int realIndex = i;
                var templateView = templates[realIndex];
                var template = templateView.template;

                <MudItem>
                    <MudCard>
                        <MudCardHeader>
                            <CardHeaderActions> 
                                <MudChipSet T="int" Class="p-2">
                                    <MudChip OnClick="async () => await TemplateLike(templateView)" 
                                    Variant="@(templateView.liked ? Variant.Filled : Variant.Text)"
                                    Color="@(templateView.liked ? Color.Primary : Color.Surface)"
                                    Icon="@(templateView.liked ? Icons.Material.Filled.Favorite : Icons.Material.Outlined.FavoriteBorder)">@template.UsersWhoLiked.Count</MudChip>

                                    <MudChip Icon="@Icons.Material.Filled.Comment" Color="Color.Surface">@template.Comments.Count</MudChip>

                                    <MudChip Icon="@Icons.Material.Filled.Description" Color="Color.Surface">@template.Responses.Count</MudChip>
                                </MudChipSet>
                            </CardHeaderActions>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@TemplateTitleOrUnnamed(template)</MudText>
                                <MudText Typo="Typo.body2" style="font-style: italic;">@template.Owner?.UserName</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardMedia Style="width: 300px; height: 200px; align-self: center;"
                        Image="@(string.IsNullOrWhiteSpace(template.CoverImageUrl) ? Assets["BlankThumbnail.png"] : template.CoverImageUrl)" />
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle1">@($"Created at {template.CreatedAt.ToLocalTime().ToShortDateString()}")</MudText>
                        </MudCardContent>
                        <MudCardActions Class="justify-space-around my-2">
                            <MudButton Class="rounded-pill" Variant="Variant.Filled" Color="Color.Info" Href="@($"/Template/{template.Id}")">View Template</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        }
    </MudGrid>
}

@code {
    public enum GalleryMode{
        GlobalNewest,
        GlobalPopular,
        BySpecificUser,
        CustomList,
    }

    [Parameter, EditorRequired]
    public GalleryMode Mode { get; set; }

    [Parameter]
    public string? TargetUsername { get; set; }

    [Parameter]
    public List<Template>? CustomTemplates { get; set; }

    [Parameter]
    public string CustomTemplatesHeaderText { get; set; } = "";

    [Parameter]
    public int skeletonsCount { get; set; } = 12;


    List<TemplateView> templates = new();

    private WoasFormsAppUser curUser;

    string _headerText => Mode switch
    {
        GalleryMode.GlobalNewest => "Newest Templates",
        GalleryMode.GlobalPopular => "Popular Templates",
        GalleryMode.BySpecificUser => $"Templates by {TargetUsername}",
        GalleryMode.CustomList => CustomTemplatesHeaderText,
        _ => "Templates"
    };

    protected override async Task OnParametersSetAsync()
    {
        var authState = await auth.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);
        curUser = await userManager.FindByIdAsync(userId);

        
        List<Template> prepList = new();
        switch (Mode)
        {
            case GalleryMode.GlobalNewest: 
                prepList = new List<Template>(await dba.GetAvailableTemplates());
                prepList = prepList.OrderByDescending(t => t.CreatedAt).ToList();
                break;
            case GalleryMode.GlobalPopular:
                prepList = new List<Template>(await dba.GetAvailableTemplates());
                prepList = prepList.OrderBy(t => t.Responses.Count).ThenByDescending(t => t.CreatedAt).ToList();
                break;
            case GalleryMode.BySpecificUser:
                if (TargetUsername == null) throw new Exception("TargetUsername parameter required");
                prepList = new List<Template>(await dba.GetTemplatesByOwner(TargetUsername));
                break;
            case GalleryMode.CustomList:
                if (CustomTemplates == null) throw new Exception("CustomTemplates parameter required");
                prepList = CustomTemplates;
                break;
        }
        prepList ??= new List<Template>();
        templates = prepList.Select(
            t => new TemplateView()
                {
                    template = t,
                    liked = (curUser == null) ? false : t.UsersWhoLiked.Contains(curUser),
                    likes = t.UsersWhoLiked.Count,
                    comments = t.Responses.Count,
                    responses = t.Responses.Count,
                }
        ).ToList();
        await base.OnInitializedAsync();
    }

    public class TemplateView(){
        public Template template { get; set; }
        public bool liked { get; set; }
        public int likes { get; set; }
        public int comments {get; set;}
        public int responses { get; set; }
    }

    private async Task TemplateLike(TemplateView target)
    {
        await dba.LikeTemplate(target.template.Id, !target.liked);
        target.liked = (curUser == null) ? false : target.template.UsersWhoLiked.Contains(curUser);
        StateHasChanged();
    }
}