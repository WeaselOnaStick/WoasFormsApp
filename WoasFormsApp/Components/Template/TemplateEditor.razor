@using FluentValidation
@using MudBlazor.Utilities

@inject IDatabaseAccessorService dba
@inject NavigationManager nav
@inject ISnackbar snack
@inject IDialogService DialogService

<PageTitle>@loc["TEMPLATE_CREATOR_HEADER"]</PageTitle>

<MudGrid Justify="Justify.SpaceAround" Class="pa-4">
    <MudItem md="8" xs="12">
        <MudPaper Class="pa-2">
            <MudForm Model="templateModel" Validation="@(validator.ValidateValue)" @bind-Errors=formErrors>

                <MudTextField @bind-Value="templateModel.Title"
                Class="p-2" Typo="Typo.h3" Variant="Variant.Outlined"
                Label=@loc["TEMPLATE_TITLE"]
                For="@(() => templateModel.Title)" />

                <MudPaper Elevation="3" Class="m-2 p-2 mb-6">
                    <MudTabs Rounded="true">
                        <MudTabPanel Text=@loc["EDIT_DESCRIPTION"]>
                            <MudTextField @bind-Value="templateModel.Description"
                            For="@(() => templateModel.Description)"
                            Lines="6" AutoGrow="true" MaxLines="24"
                            Class="p-2 mb-4" Typo="Typo.subtitle1" Variant="Variant.Outlined"
                            Label=@loc["TEMPLATE_DESCRIPTION"] />
                        </MudTabPanel>
                        <MudTabPanel Text=@loc["TEMPLATE_DESCRIPTION_PREVIEW_MARKDOWN"]>
                            <MudPaper Class="p-2 mb-4" Elevation="0">
                                <MudMarkdown Value="@templateModel.Description" />
                            </MudPaper>
                        </MudTabPanel>
                    </MudTabs>
                </MudPaper>

                <MudDropContainer Items="templateModel.Fields"
                T="TemplateField"
                ItemDropped="@DropHandle"
                ItemsSelector="@((_,_) => true)">
                    <ChildContent>
                        <MudDropZone T="TemplateField" AllowReorder="true" Identifier="Editor" Class="mud-black">
                            <MudText 
                                Typo="Typo.h5" Align="Align.Center">
                                @loc["TEMPLATE_FIELDS"]
                            </MudText>
                        </MudDropZone>
                    </ChildContent>
                    <ItemRenderer>
                        <TemplateFieldEdit
                        Model="templateModel"
                        Field="context"
                        OnDelete="() => RemoveField(context.Position)" />
                    </ItemRenderer>
                </MudDropContainer>
            </MudForm>
        </MudPaper>
    </MudItem>

    <MudItem md="4" xs="12">
        <MudPaper Class="pa-4" Style="position: sticky; top: 5rem;">

            <!-- META-TOPIC -->
            <MudSelect @bind-Value="templateModel.TopicId" T="int"
            Variant="Variant.Outlined" Label=@loc["TOPIC"]
            Required="true" RequiredError=@loc["VALID_TOPIC_REQUIRED"]>
                @foreach (var item in (_topicsCache ?? new()))
                {
                    <MudSelectItem Value="item.Id">@loc[@item.Title]</MudSelectItem>
                }
            </MudSelect>

            <!-- META-TAGS -->
            <MudAutocomplete @bind-Value=_userNewTag @bind-Text=_userNewTag
            Label=@loc["ADD_TAG"] Class="p-2 m-2"
            CoerceValue="true" SearchFunc="SearchTag" T="string"
            OnKeyDown="@(e => {if (e.Code == "Enter") AddUserTag();})"
            AdornmentIcon="@Icons.Material.Filled.AddCircleOutline" AdornmentColor="Color.Success" OnAdornmentClick=AddUserTag />
            <MudChipSet T="TemplateTag" AllClosable>
                @foreach (var tag in templateModel.Tags)
                {
                    <MudChip T="TemplateTag" Text="@tag.Title" OnClose="(() => templateModel.Tags.Remove(tag))" />
                }
            </MudChipSet>

            <MudFileUpload T="IBrowserFile" />

            <MudExpansionPanels>
                <!-- AMMO -->
                <MudExpansionPanel Text=@loc["TEMPLATE_FIELDS"]>
                    <MudButtonGroup Vertical="true" Variant="Variant.Outlined" Style="display: flex;">
                        @foreach (var item in (_fieldTypesCache ?? new()))
                        {
                            <MudButton Disabled="@(_fieldCounts[item.Id].CurAmount >= _fieldCounts[item.Id].MaxAmount)"
                            StartIcon="@Icons.Material.Outlined.AddCircleOutline"
                            OnClick="(e) => AddField(item.Id)">
                                @loc["ADD_FIELD", loc[item.Name]]

                                <MudSpacer />

                                @($"({_fieldCounts[item.Id].CurAmount}/{_fieldCounts[item.Id].MaxAmount})")
                            </MudButton>
                        }
                    </MudButtonGroup>
                </MudExpansionPanel>

                <!-- PRIVACY -->
                <MudExpansionPanel Text=@loc["PRIVACY"]>
                    <MudCheckBox T="bool" Label=@loc["PUBLIC"] @bind-Value="templateModel.Public" />
                    @if (!templateModel.Public)
                    {
                        <MudAutocomplete @bind-Value="_autoFoundAllowedUser"
                        SearchFunc="@SearchUser"
                        Label=@loc["SEARCH_USER_TO_WHITELIST"] 
                        ShowProgressIndicator="true" Class="p-1" Variant="Variant.Filled"
                        AdornmentColor="Color.Success" AdornmentIcon="@Icons.Material.Filled.AddCircleOutline" OnAdornmentClick="() => AddAutoFoundUser()"
                        OnKeyDown="@(e => {if (e.Code == "Enter") AddAutoFoundUser();})" />
                        <MudDataGrid Items="@templateModel.AllowedUsers" Groupable="false" Dense="true">
                            <Columns>
                                <PropertyColumn Property="u => u.UserName" />
                                <TemplateColumn>
                                    <CellTemplate>
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => {templateModel.AllowedUsers.Remove(context.Item); StateHasChanged(); }" />
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    }
                </MudExpansionPanel>

                <!-- CREATE -->
                <MudToolBar Class="justify-content-center">
                    @switch (editorMode)
                    {
                        case EditorMode.Create:
                            <MudButton OnClick="CreateTemplate" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Check" Class="my-4 justify-center">Create Template</MudButton>
                            break;
                        case EditorMode.Edit:
                            <MudButton OnClick="EditTemplate" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Create" Class="my-4 justify-center">Save Template</MudButton>
                            break;
                    }

                </MudToolBar>
                <MudStack>
                    @foreach (var err in formErrors)
                    {
                        <MudText Typo="Typo.body2" Color="Color.Error" Align="Align.Center">@err</MudText>
                    }
                </MudStack>
            </MudExpansionPanels>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public enum EditorMode{
        Create,
        Edit,
    }

    [Parameter, EditorRequired]
    public EditorMode editorMode { get; set; }

    [Parameter, EditorRequired]
    public Template templateModel { get; set; } = new Template() { Fields = new List<TemplateField>() };

    public string[] formErrors { get; set; } = new string[0];

    public static int MaxQuestionPerType = 4;

    private HashSet<TemplateFieldType>? _fieldTypesCache;
    private HashSet<WoasFormsAppUser>? _usersCache;
    private HashSet<TemplateTopic>? _topicsCache;
    private HashSet<TemplateTag>? _tagsCache;

    private class FieldCounts
    {
        public int MaxAmount;
        public int CurAmount;
    }
    private Dictionary<int, FieldCounts> _fieldCounts = new();

    private WoasFormsAppUser _autoFoundAllowedUser = new();

    private string _userNewTag = "";

    private async Task InitTagsCache() => _tagsCache ??= (await dba.GetTags()).ToHashSet();

    private async Task<IEnumerable<string>> SearchTag(string searchText, CancellationToken cancellationToken)
    {
        await InitTagsCache();
        var res = _tagsCache.ExceptBy(templateModel.Tags.Select(t => t.Title), t => t.Title, StringComparer.InvariantCultureIgnoreCase);
        if (string.IsNullOrEmpty(searchText)) return res.Select(t => t.Title);
        return res.Where(t => t.Title.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).Select(t => t.Title);
    }

    private void AddUserTag()
    {
        if (string.IsNullOrEmpty(_userNewTag)) return;
        if (templateModel.Tags.Select(t => t.Title).Contains(_userNewTag)) return;
        templateModel.Tags.Add(new TemplateTag { Title = _userNewTag });
        _userNewTag = "";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        validator = new TemplateCreationValidator(loc);
        _topicsCache = await dba.GetTopics();
        _fieldTypesCache = await dba.GetTemplateFieldTypes();
        foreach (var fieldType in _fieldTypesCache)
        {
            int curCount = templateModel.Fields.Where(f => f.Type.Name == fieldType.Name).Count();
            _fieldCounts[fieldType.Id] = new FieldCounts
                {
                    MaxAmount = MaxQuestionPerType,
                    CurAmount = curCount,
                };
        }
    }


    public void AddField(int typeId)
    {
        if (!_fieldCounts.ContainsKey(typeId) || _fieldCounts[typeId].CurAmount >= _fieldCounts[typeId].MaxAmount) return;

        templateModel.Fields.Add(
            new TemplateField
                {
                    Id = templateModel.Fields.Count,
                    Hidden = false,
                    Type = _fieldTypesCache!.First(tfc => tfc.Id == typeId),
                    Template = templateModel,
                    Position = templateModel.Fields.Count + 1,
                }
        );

        _fieldCounts[typeId].CurAmount++;
        StateHasChanged();
    }

    public void RemoveField(int Pos)
    {
        var targetField = templateModel.Fields.First(f => f.Position == Pos);
        _fieldCounts[targetField.Type.Id].CurAmount--;
        templateModel.Fields.Remove(targetField);
        StateHasChanged();
    }

    private void DropHandle(MudItemDropInfo<TemplateField> droppedField)
    {
        templateModel.Fields.UpdateOrder(droppedField, f => f.Position);
        StateHasChanged();
    }

    public TemplateCreationValidator validator;

    public class TemplateCreationValidator : AbstractValidator<Template>
    {
        public TemplateCreationValidator(IStringLocalizer loc)
        {
            RuleFor(t => t.Title).NotEmpty().WithMessage(loc["VALID_TITLE_REQUIRED"]) ;
            RuleFor(t => t.Fields).NotEmpty().WithMessage(loc["VALID_NO_FIELDS"]);

            RuleFor(t => t.Fields).Must(
                t => t.Count == 0 || t.GroupBy(f => f.Type.Id)
                .Select(g => new { g.Key, Count = g.Count() })
                .Max(g => g.Count) <= MaxQuestionPerType)
                .WithMessage(loc["VALID_TOO_MANY_FIELDS_PER_TYPE", MaxQuestionPerType]);

            RuleForEach(t => t.Fields).ChildRules(f =>
                {
                    f.RuleFor(f => f.Title)
                    .NotEmpty()
                    .WithMessage((f, t) => loc["VALID_FIELD_MISSING_TITLE", f.Position]);
                });


            RuleFor(t => t.TopicId).NotNull().WithMessage(loc["VALID_TOPIC_EMPTY"]);


        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<Template>.CreateWithOptions((Template)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    async Task<bool> ValidateTemplate()
    {
        var wholeCheck = await validator.ValidateAsync(templateModel);
        if (!wholeCheck.IsValid)
        {
            formErrors = wholeCheck.Errors.Select(e => e.ErrorMessage).ToArray();
            snack.Add(loc["VALID_TEMPLATE_INVALID"], MudBlazor.Severity.Error);
            StateHasChanged();
            return false;
        }
        StateHasChanged();
        return true;
    }

    void SortTemplate() => templateModel.Fields = templateModel.Fields.OrderBy(f => f.Position).ToList();

    async Task CreateTemplate()
    {
        if (!await ValidateTemplate()) return;
        SortTemplate();

        var newTemplate = await dba.CreateTemplate(templateModel);

        if (newTemplate == null)
            snack.Add(loc["TEMPLATE_CREATE_ERROR"], MudBlazor.Severity.Error);
        else
        {
            snack.Add(loc["TEMPLATE_CREATE_SUCCESS", newTemplate.Title], MudBlazor.Severity.Success);
            nav.NavigateTo($"/Template/{newTemplate.Id}");
        }
    }

    async Task EditTemplate()
    {
        if (!await ValidateTemplate()) return;
        if (templateModel.Responses.Count > 0)
        {
            bool? confirm = await DialogService.ShowMessageBox(
                new MessageBoxOptions()
                    {
                        Title = loc["TEMPLATE_EDIT_CONFIRM"],
                        Message = loc["TEMPLATE_EDIT_CONFIRM_DESC"],
                        YesText = loc["CONFIRM"],
                        CancelText = loc["CANCEL"],
                    }
            );
            if (confirm == null) { StateHasChanged(); return; }
        }
        var newTemplate = await dba.UpdateTemplate(templateModel, templateModel.Id);

        if (newTemplate == null)
            snack.Add(loc["TEMPLATE_EDIT_ERROR"], MudBlazor.Severity.Error);
        else
        {
            
            snack.Add(loc["TEMPLATE_EDIT_SUCCESS", newTemplate.Title], MudBlazor.Severity.Success);
            nav.NavigateTo($"/Template/{newTemplate.Id}");
        }
    }

    async Task CacheUsers() => _usersCache ??= new HashSet<WoasFormsAppUser>(await dba.GetAllUsers());

    async Task<IEnumerable<WoasFormsAppUser>> SearchUser(string searchText, CancellationToken cancellationToken)
    {
        await CacheUsers();
        var res = _usersCache!.ExceptBy(templateModel.AllowedUsers.Select(au => au.UserName), u => u.UserName, StringComparer.InvariantCultureIgnoreCase);
        if (string.IsNullOrWhiteSpace(searchText)) return res;
        return res.Where(u => u.UserName.Contains(searchText, StringComparison.InvariantCultureIgnoreCase));
    }

    void AddAutoFoundUser()
    {
        if (_autoFoundAllowedUser == null || string.IsNullOrEmpty(_autoFoundAllowedUser.UserName)) return;
        templateModel.AllowedUsers.Add(_autoFoundAllowedUser);
        _autoFoundAllowedUser = null;
        StateHasChanged();
    }
}
